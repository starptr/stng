/* rose_config.h.  Generated from rose_config.h.in by configure.  */
/* rose_config.h.in.  Generated from configure.ac by autoheader.  */
/* this public header generated by ../rose/scripts/publicConfiguration.pl */

/* Define to 1 if you have the <dwarf.h> header file. */
/* #undef ROSE_HAVE_DWARF_H */

/* Define to 1 if you have the <gcrypt.h> header file. */
/* #undef ROSE_HAVE_GCRYPT_H */

/* Define to 1 if you have the `dwarf' library (-ldwarf). */
/* #undef ROSE_HAVE_LIBDWARF */

/* Define to 1 if you have the `gcrypt' library (-lgcrypt). */
/* #undef ROSE_HAVE_LIBGCRYPT */

/* Define to 1 if you have the <pthread.h> header file. */
#define ROSE_HAVE_PTHREAD_H 1

/* Have the SQLITE3 library */
/* #undef ROSE_HAVE_SQLITE3 */

/* Define to the version of this package. */
#define ROSE_PACKAGE_VERSION "0.9.7.58"

/* apple Operating System (OS) being used to build ROSE */
/* #undef ROSE_APPLE_OS_VENDOR */

/* Determines how failed assertions should behave. */
#define ROSE_ASSERTION_BEHAVIOR ROSE_ASSERTION_EXIT

/* Location (unquoted) of Boost specified on configure line. */
#define ROSE_BOOST_PATH "/home/akcheung/boostBuild"

/* Version of Boost specified on configure line. */
#define ROSE_BOOST_VERSION 105000

/* Build ROSE to support the Binary Analysis */
/* #undef ROSE_BUILD_BINARY_ANALYSIS_SUPPORT */

/* Build ROSE to support the CUDA langauge */
/* #undef ROSE_BUILD_CUDA_LANGUAGE_SUPPORT */

/* Build ROSE to support the C++ langauge */
/* #undef ROSE_BUILD_CXX_LANGUAGE_SUPPORT */

/* Build ROSE to support the C langauge */
/* #undef ROSE_BUILD_C_LANGUAGE_SUPPORT */

/* Build ROSE to support the Fortran langauge */
#define ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT /**/

/* Build ROSE to support the Java langauge */
/* #undef ROSE_BUILD_JAVA_LANGUAGE_SUPPORT */

/* Build ROSE to support the MATLAB langauge */
/* #undef ROSE_BUILD_MATLAB_LANGUAGE_SUPPORT */

/* Build ROSE to support the OpenCL langauge */
/* #undef ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT */

/* Build ROSE to support the PHP langauge */
/* #undef ROSE_BUILD_PHP_LANGUAGE_SUPPORT */

/* Build ROSE projects directory */
/* #undef ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT */

/* Build ROSE to support the Python langauge */
/* #undef ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT */

/* Build ROSE tests directory */
#define ROSE_BUILD_TESTS_DIRECTORY_SUPPORT /**/

/* Build ROSE tutorial directory */
/* #undef ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT */

/* Build ROSE to support the X10 langauge */
/* #undef ROSE_BUILD_X10_LANGUAGE_SUPPORT */

/* CentOS Operating System (OS) being used to build ROSE */
/* #undef ROSE_CENTOS_OS_VENDOR */

/* Location of ROSE Compile Tree. */
#define ROSE_COMPILE_TREE_PATH "/home/akcheung/roseBuild"

/* Encapsulates some important configuration details for rose::initialize */
#define ROSE_CONFIG_TOKEN " boost-105000 gnu-5.4 pthread"

/* Debian Operating System (OS) being used to build ROSE */
/* #undef ROSE_DEBIAN_OS_VENDOR */

/* Controls large volumes of output spew useful for debugging new OFP/ROSE
   connection code */
/* #undef ROSE_DEBUG_EXPERIMENTAL_OFP_ROSE_CONNECTION */

/* Controls large volumes of output spew useful for debugging new EDG/ROSE
   connection code */
/* #undef ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION */

/* EDG major version number */
#define ROSE_EDG_MAJOR_VERSION_NUMBER 4

/* EDG minor version number */
#define ROSE_EDG_MINOR_VERSION_NUMBER 9

/* Enables development of experimental fortran frontend */
/* #undef ROSE_EXPERIMENTAL_OFP_ROSE_CONNECTION */

/* Defined when libmagic is available. */
/* #undef ROSE_HAVE_LIBMAGIC */

/* Defined if the pqxx library is available */
/* #undef ROSE_HAVE_LIBPQXX */

/* Defined if the readline library and headers are available. */
/* #undef ROSE_HAVE_LIBREADLINE */

/* Defined when libyaml-cpp is available */
/* #undef ROSE_HAVE_LIBYAML */

/* Defined when the Yices SMT-Solver library is present and should be used. */
/* #undef ROSE_HAVE_LIBYICES */

/* Location (unquoted) of the top directory path to which ROSE is installed.
   */
#define ROSE_INSTALLATION_PATH "/home/akcheung/roseBuild"

/* OFP class path for Jave Virtual Machine */
#define ROSE_OFP_CLASSPATH /home/akcheung/roseBuild/../rose/src/3rdPartyLibraries/antlr-jars/antlr-3.3-complete.jar:/home/akcheung/roseBuild/../rose/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-20111001.jar

/* OFP jar file */
#define ROSE_OFP_JAR_FILE OpenFortranParser-20111001.jar

/* OFP major version number */
#define ROSE_OFP_MAJOR_VERSION_NUMBER 0

/* OFP minor version number */
#define ROSE_OFP_MINOR_VERSION_NUMBER 8

/* OFP patch version number */
#define ROSE_OFP_PATCH_VERSION_NUMBER 3

/* OFP version number */
#define ROSE_OFP_VERSION_NUMBER 20111001

/* RedHat Operating System (OS) major release number being used to build ROSE
   */
#define ROSE_OS_MAJOR_RELEASE_NUMBER 16

/* RedHat Operating System (OS) minor release number being used to build ROSE
   */
#define ROSE_OS_MINOR_RELEASE_NUMBER 04

/* RedHat Operating System (OS) being used to build ROSE */
/* #undef ROSE_REDHAT_OS_VENDOR */

/* Git SCM version information for ROSE: commit identifier. */
#define ROSE_SCM_VERSION_ID "efdad64748d68f94b47f3d3758eb3191b9b3a8e4"

/* Git SCM version information for ROSE: commit date (Unix timestamp). */
#define ROSE_SCM_VERSION_UNIX_DATE 1469128249

/* Variable like LD_LIBRARY_PATH */
#define ROSE_SHLIBPATH_VAR "LD_LIBRARY_PATH"

/* Location of ROSE Source Tree. */
#define ROSE_SOURCE_TREE_PATH "/home/akcheung/rose"

/* Ubuntu Operating System (OS) being used to build ROSE */
#define ROSE_UBUNTU_OS_VENDOR 

/* Whether to use Candl support or not within ROSE */
/* #undef ROSE_USE_CANDL */

/* Use Clang for parsing C/C++-like languages */
/* #undef ROSE_USE_CLANG_FRONTEND */

/* Whether to use Cloog support or not within ROSE */
/* #undef ROSE_USE_CLOOG */

/* Defined if dlib is available. */
/* #undef ROSE_USE_DLIB */

/* Whether to use the new EDG version 4.x */
#define ROSE_USE_EDG_VERSION_4 /**/

/* Whether to use the new EDG version 4.4 */
/* #undef ROSE_USE_EDG_VERSION_4_4 */

/* Whether to use the new EDG version 4.7 */
/* #undef ROSE_USE_EDG_VERSION_4_7 */

/* Whether to use the new EDG version 4.8 */
/* #undef ROSE_USE_EDG_VERSION_4_8 */

/* Whether to use the new EDG version 4.9 */
#define ROSE_USE_EDG_VERSION_4_9 /**/

/* Defined if Ether from Georgia Tech is available. */
/* #undef ROSE_USE_ETHER */

/* Whether to use a special no-reuse mode of memory pools */
/* #undef ROSE_USE_MEMORY_POOL_NO_REUSE */

/* Controls use of Microsoft MSVC features */
/* #undef ROSE_USE_MICROSOFT_EXTENSIONS */

/* Whether to use the new interface to EDG */
#define ROSE_USE_NEW_EDG_INTERFACE /**/

/* Whether to use Parma Polyhedral Library (PPL) support or not within ROSE */
/* #undef ROSE_USE_PPL */

/* Whether to use ScopLib support or not within ROSE */
/* #undef ROSE_USE_SCOPLIB */

/* Whether to use smaller (but more numerous) generated files for the ROSE IR
   */
/* #undef ROSE_USE_SMALLER_GENERATED_FILES */

/* Support for an advanced uniform warning level for ROSE development */
/* #undef ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT */

/* Defined if the web toolkit Wt is available. */
#define ROSE_USE_WT 1

/* Whether to use the new graph IR nodes compatability option with older API
   */
/* #undef ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY */

/* Simple preprocessor as default in ROSE */
#define ROSE_WAVE_DEFAULT false

/* Location (unquoted) of Wave specified on configure line. */
#define ROSE_WAVE_PATH "/home/akcheung/boostBuild/wave"

/* Absolute name of yices executable, or the empty string. */
/* #undef ROSE_YICES */

/* Absolute name of z3 executable, or the empty string. */
#define ROSE_Z3 ""

/* The size of `int', as computed by sizeof. */
#define ROSE_SIZEOF_INT 4

/* The size of `long', as computed by sizeof. */
#define ROSE_SIZEOF_LONG 8

/* Controls design of internal template declaration support within the ROSE
   AST. */
#define ROSE_TEMPLATE_DECLARATIONS_DERIVED_FROM_NON_TEMPLATE_DECLARATIONS /**/

/* Controls use of ROSE support for ATerm Library. */
/* #undef ROSE_USE_ROSE_ATERM_SUPPORT */
